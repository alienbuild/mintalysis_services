generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// BEGIN_MODELS
// schemas/articles.prisma
// Articles and News

model article {
  id           Int                    @id @default(autoincrement())
  image        String?
  author_id    String?
  publishedAt  DateTime               @default(now())
  published    Boolean                @default(false)
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  slug         String                 @unique
  project_id   String?
  to_process   Boolean?               @default(false)
  author       User?                  @relation(fields: [author_id], references: [id])
  project      projects?              @relation(fields: [project_id], references: [id])
  translations article_translations[]

  @@index([author_id], map: "article_author_id_fkey")
  @@index([project_id], map: "article_project_id_fkey")
}

model article_translations {
  article_id Int
  language   Language
  title      String
  content    String   @db.Text
  subtitle   String?  @db.Text
  article    article  @relation(fields: [article_id], references: [id])

  @@id([language, article_id])
  @@index([language])
  @@index([article_id], map: "article_translations_article_id_fkey")
}

// schemas/artists.prisma
// Artists

model artists {
  artist_id      String                 @id
  name           String
  slug           String?                @unique
  image          String?
  createdAt      DateTime               @default(now())
  updatedAt      DateTime?              @updatedAt
  veve_comics    veve_comics[]          @relation("artistsToveve_comics")
  translations   artists_translations[]
  artists_grails artists_grails[]
}

model artists_translations {
  artist_id       String
  language        Language
  title           String?
  content         String?  @db.Text
  subtitle        String?  @db.Text
  seo_description String?  @db.Text
  seo_keywords    String?  @db.Text
  seo_title       String?  @db.Text
  og_title        String?  @db.Text
  og_description  String?  @db.Text
  artist          artists  @relation(fields: [artist_id], references: [artist_id])

  @@id([language, artist_id])
  @@index([language])
}

model artists_grails {
  id              Int          @id @default(autoincrement())
  title           String
  description     String?      @db.Text
  year            Int
  number          String
  unique_cover_id String?
  artist_id       String
  artist          artists      @relation(fields: [artist_id], references: [artist_id])
  comic           veve_comics? @relation(fields: [unique_cover_id], references: [unique_cover_id])

  @@index([artist_id])
  @@index([unique_cover_id])
}

// schemas/blockchains/immutable.prisma
// Immutable

model imx_deposits {
  txn_id             Int       @id
  status             String?
  wallet_id          String?
  token_type         String?
  token_id           String?
  id                 String?
  token_address      String?
  decimals           Int?
  quantity           String?
  quantity_with_fees String?
  timestamp          String?   @db.Text
  createdAt          DateTime  @default(now())
  updatedAt          DateTime? @updatedAt
  timestamp_d        DateTime? @db.DateTime(6)
  to_process         Boolean?  @default(true)

  @@index([wallet_id])
}

model imx_orders {
  order_id                 Int       @id
  wallet_id                String?
  type                     String?
  token_id                 String?
  token_address            String?
  quantity                 String?
  quantity_with_fees       String?
  name                     String?
  image_url                String?
  collection_name          String?
  collection_icon_url      String?
  decimals                 Int?
  amount_sold              Int?
  expiration_timestamp     DateTime?
  timestamp                DateTime?
  updated_timestamp        DateTime?
  maker_taker_type         String
  maker_fees_qty_with_fees String?
  maker_fees_token_type    String?
  maker_fees_token_address String?
  maker_fees_decimals      Int?
  maker_fees_symbol        String?
  taker_fees_qty_with_fees String?
  taker_fees_token_type    String?
  taker_fees_token_address String?
  taker_fees_decimals      Int?
  taker_fees_symbol        String?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime? @updatedAt
  status                   String?
  to_process               Boolean?  @default(true)

  @@index([wallet_id])
}

model imx_trades {
  txn_id          Int       @id
  status          String?
  a_order_id      Int?
  a_token_type    String?
  a_sold_quantity String?
  token_id        Int?
  b_order_id      Int?
  b_token_type    String?
  b_token_id      String?   @db.VarChar(100)
  b_token_address String?
  b_sold          Int?
  timestamp       String?   @db.Text
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt
  a_token_address String?   @db.Text
  to_process      Boolean?  @default(true)
}

model imx_withdrawals {
  txn_id              Int       @id
  status              String?
  rollup_status       String?
  withdrawn_to_wallet Boolean?
  sender              String?
  token_type          String?
  token_id            String?
  imx_id              String?
  token_address       String?
  token_decimals      Int?
  token_qty           String?
  token_qty_with_fees String?
  timestamp           DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime? @updatedAt
  to_process          Boolean?  @default(true)

  @@index([txn_id])
}

model imx_stats {
  project_id          String   @unique
  mint_count          Int?
  transfer_count      Int?
  transaction_count   Int?
  token_count         Int?
  comic_count         Int?
  collectible_count   Int?
  burn_count          Int?
  wallet_count        Int?
  unique_owners_count Int?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

// schemas/projects/veve/brands.prisma
// Veve Brands

model brands {
  brand_id                            String                @id
  name                                String?
  description                         String?               @db.Text
  landscape_image_url                 String?
  landscape_image_thumbnail_url       String?
  landscape_image_low_resolution_url  String?
  landscape_image_med_resolution_url  String?
  landscape_image_full_resolution_url String?
  landscape_image_high_resolution_url String?
  landscape_image_direction           String?
  square_image_url                    String?
  square_image_thumbnail_url          String?
  square_image_low_resolution_url     String?
  square_image_med_resolution_url     String?
  square_image_full_resolution_url    String?
  square_image_high_resolution_url    String?
  square_image_direction              String?
  licensor_id                         String
  slug                                String?               @unique
  sort                                Int?
  veve_collectibles                   veve_collectibles[]
  veve_tokens                         veve_tokens[]
  createdAt                           DateTime              @default(now())
  updatedAt                           DateTime?             @updatedAt
  veve_metrics                        veve_brands_metrics[]

  @@index([licensor_id], map: "brands_licensor_id_fkey")
}

model veve_brands_metrics {
  brand_id           String   @id
  all_time_high      Decimal? @db.Decimal(10, 2)
  all_time_low       Decimal? @db.Decimal(10, 2)
  floor_price        Decimal? @db.Decimal(10, 2)
  market_cap         Decimal? @db.Decimal(10, 2)
  one_day_change     Decimal? @db.Decimal(10, 2)
  one_mo_change      Decimal? @db.Decimal(10, 2)
  one_wk_change      Decimal? @db.Decimal(10, 2)
  one_year_change    Decimal? @db.Decimal(10, 2)
  six_mo_change      Decimal? @db.Decimal(10, 2)
  three_mo_change    Decimal? @db.Decimal(10, 2)
  total_listings     Int?
  all_time_change    Decimal? @db.Decimal(10, 2)
  volume             Decimal? @db.Decimal(10, 2)
  circulating_supply Decimal? @db.Decimal(10, 2)
  brand              brands   @relation(fields: [brand_id], references: [brand_id])
}

// schemas/characters.prisma
// Characters

model characters {
  character_id      String                    @id
  name              String
  slug              String?                   @unique
  image             String?
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime?                 @updatedAt
  veve_comics       veve_comics[]             @relation("charactersToveve_comics")
  translations      characters_translations[]
  characters_grails characters_grails[]
}

model characters_translations {
  character_id    String
  language        Language
  title           String?
  content         String?    @db.Text
  subtitle        String?    @db.Text
  seo_description String?    @db.Text
  seo_keywords    String?    @db.Text
  seo_title       String?    @db.Text
  og_title        String?    @db.Text
  og_description  String?    @db.Text
  character       characters @relation(fields: [character_id], references: [character_id])

  @@id([language, character_id])
  @@index([language])
}

model characters_grails {
  id              Int          @id @default(autoincrement())
  title           String
  description     String?      @db.Text
  year            Int
  number          String
  unique_cover_id String?
  character_id    String
  character       characters   @relation(fields: [character_id], references: [character_id])
  comic           veve_comics? @relation(fields: [unique_cover_id], references: [unique_cover_id])

  @@index([character_id])
  @@index([unique_cover_id])
}

//// schemas/community.prisma
//// Community
//
//model communities {
//  id                        String                      @id @default(uuid())
//  name                      String                      @unique
//  type                      CommunityPrivacy            @default(PUBLIC)
//  creator_id                String
//  member_count              Int?
//  createdAt                 DateTime                    @default(now())
//  updatedAt                 DateTime                    @updatedAt
//  cover_image               String?
//  image                     String?
//  slug                      String                      @unique
//  project_id                String?
//  veve_collectible_id       String?
//  veve_comic_id             String?
//  gate_key                  String?
//  member                    member[]
//  users_communities_invites users_communities_invites[]
//  comments                  comments[]
//  creator                   User                        @relation("creator", fields: [creator_id], references: [id])
//  project                   projects?                   @relation(fields: [project_id], references: [id])
//  veve_collectible          veve_collectibles?          @relation(fields: [veve_collectible_id], references: [collectible_id])
//  veve_comic                veve_comics?                @relation(fields: [veve_comic_id], references: [unique_cover_id])
//  community_posts           community_posts[]
//  posts                     posts[]
//  utilities                 utilities[]
//
//  @@index([creator_id], map: "communities_creator_id_fkey")
//  @@index([project_id], map: "communities_project_id_fkey")
//  @@index([veve_collectible_id], map: "communities_veve_collectible_id_fkey")
//  @@index([veve_comic_id], map: "communities_veve_comic_id_fkey")
//}
//
//model member {
//  A           String
//  B           String
//  users       User        @relation(fields: [A], references: [id], onDelete: Cascade)
//  communities communities @relation(fields: [B], references: [id], onDelete: Cascade)
//
//  @@unique([A, B], map: "_member_AB_unique")
//  @@index([B], map: "_member_B_index")
//  @@map("_member")
//}
//
//model users_communities_invites {
//  A           String
//  B           String
//  users       User        @relation(fields: [A], references: [id], onDelete: Cascade)
//  communities communities @relation(fields: [B], references: [id], onDelete: Cascade)
//
//  @@unique([A, B], map: "_users_communities_invites_AB_unique")
//  @@index([B], map: "_users_communities_invites_B_index")
//  @@map("_users_communities_invites")
//}
//
//model utilities {
//  id           String       @id
//  title        String?
//  body         String?
//  value        Int?
//  community_id String?
//  communities  communities? @relation(fields: [community_id], references: [id])
//
//  @@index([community_id], map: "utilities_community_id_fkey")
//}
//
//model community_posts {
//  id                           String                  @id
//  author_id                    String
//  community_id                 String
//  content                      String?
//  image_url                    String?
//  community_image_url          String?
//  comment_count                Int?
//  like_count                   Int?
//  createdAt                    DateTime                @default(now())
//  updatedAt                    DateTime
//  likes_community_posts        likes_community_posts[]
//  comments                     comments[]
//  users_community_postsTousers User                    @relation(fields: [author_id], references: [id])
//  communities                  communities             @relation(fields: [community_id], references: [id])
//
//  @@index([author_id], map: "community_posts_author_id_fkey")
//  @@index([community_id], map: "community_posts_community_id_fkey")
//}
//
//model likes_community_posts {
//  A               String
//  B               String
//  users           User            @relation(fields: [A], references: [id], onDelete: Cascade)
//  community_posts community_posts @relation(fields: [B], references: [id], onDelete: Cascade)
//
//  @@unique([A, B], map: "_likes_community_posts_AB_unique")
//  @@index([B], map: "_likes_community_posts_B_index")
//  @@map("_likes_community_posts")
//}
//
//// Post and Comment Management
//model posts {
//  id                  String            @id
//  author_id           String?
//  community_id        String?
//  body                String?
//  image_url           String?
//  community_image_url String?
//  comment_count       Int?
//  like_count          Int?
//  createdAt           DateTime          @default(now())
//  audience            posts_audience    @default(PUBLIC)
//  likes_posts         likes_posts[]
//  users_posts_tag     users_posts_tag[]
//  comments            comments[]
//  users_postsTousers  User?             @relation(fields: [author_id], references: [id])
//  communities         communities?      @relation(fields: [community_id], references: [id])
//
//  @@index([author_id], map: "posts_author_id_fkey")
//  @@index([community_id], map: "posts_community_id_fkey")
//}
//
//model comments {
//  id                    String           @id
//  author_id             String
//  post_id               String
//  community_id          String
//  body                  String?
//  like_count            Int?
//  createdAt             DateTime         @default(now())
//  updatedAt             DateTime
//  parent_id             String?
//  community_postsId     String?
//  likes_comments        likes_comments[]
//  users_commentsTousers User             @relation(fields: [author_id], references: [id])
//  communities           communities      @relation(fields: [community_id], references: [id])
//  community_posts       community_posts? @relation(fields: [community_postsId], references: [id])
//  comments              comments?        @relation("commentsTocomments", fields: [parent_id], references: [id])
//  other_comments        comments[]       @relation("commentsTocomments")
//  posts                 posts            @relation(fields: [post_id], references: [id])
//
//  @@index([author_id], map: "comments_author_id_fkey")
//  @@index([community_id], map: "comments_community_id_fkey")
//  @@index([community_postsId], map: "comments_community_postsId_fkey")
//  @@index([parent_id], map: "comments_parent_id_fkey")
//  @@index([post_id], map: "comments_post_id_fkey")
//}
//
//model likes_comments {
//  A        String
//  B        String
//  users    User     @relation(fields: [A], references: [id], onDelete: Cascade)
//  comments comments @relation(fields: [B], references: [id], onDelete: Cascade)
//
//  @@unique([A, B], map: "_likes_comments_AB_unique")
//  @@index([B], map: "_likes_comments_B_index")
//  @@map("_likes_comments")
//}
//
//model likes_posts {
//  A     String
//  B     String
//  users User   @relation(fields: [A], references: [id], onDelete: Cascade)
//  posts posts  @relation(fields: [B], references: [id], onDelete: Cascade)
//
//  @@unique([A, B], map: "_likes_posts_AB_unique")
//  @@index([B], map: "_likes_posts_B_index")
//  @@map("_likes_posts")
//}
//
//model users_posts_tag {
//  A     String
//  B     String
//  users User   @relation(fields: [A], references: [id], onDelete: Cascade)
//  posts posts  @relation(fields: [B], references: [id], onDelete: Cascade)
//
//  @@unique([A, B], map: "_users_posts_tag_AB_unique")
//  @@index([B], map: "_users_posts_tag_B_index")
//  @@map("_users_posts_tag")
//}

//// schemas/games/poker/poker.prisma
//// Poker
//
//model poker_profile {
//  id                            String                      @id @default(uuid())
//  userId                        String                      @unique
//  poker_table_potsId            String?
//  poker_table                   poker_table[]
//  poker_table_message           poker_table_message[]
//  poker_table_participant       poker_table_participant[]
//  poker_table_pots              poker_table_pots?           @relation(fields: [poker_table_potsId], references: [id])
//  user                          User                        @relation(fields: [userId], references: [id])
//}
//
//model poker_table {
//  id                                                                     String                    @id
//  host_id                                                                String?
//  createdAt                                                              DateTime                  @default(now())
//  updatedAt                                                              DateTime
//  latest_message_id                                                      String?                   @unique
//  community_cards                                                        String?                   @db.LongText
//  status                                                                 poker_table_status        @default(WAITING)
//  buy_in                                                                 Int                       @default(1000)
//  current_round                                                          String?
//  hand_number                                                            Int                       @default(0)
//  deck                                                                   String?                   @db.LongText
//  current_bet                                                            Int?
//  current_position                                                       Int?
//  last_position                                                          Int?
//  users                                                                  User?                     @relation(fields: [host_id], references: [id])
//  poker_table_message_poker_table_latest_message_idTopoker_table_message poker_table_message?      @relation("poker_table_latest_message_idTopoker_table_message", fields: [latest_message_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
//  poker_table_message_poker_tableTopoker_table_message_poker_table_id    poker_table_message[]     @relation("poker_tableTopoker_table_message_poker_table_id")
//  poker_table_participant                                                poker_table_participant[]
//  poker_table_pots                                                       poker_table_pots[]
//
//}
//
//model poker_table_message {
//  id                                                             String                     @id
//  poker_table_id                                                 String
//  senderId                                                       String
//  body                                                           String                     @db.Text
//  createdAt                                                      DateTime                   @default(now())
//  updatedAt                                                      DateTime
//  type                                                           poker_table_message_type   @default(TEXT)
//  status                                                         poker_table_message_status @default(SENT)
//  poker_table_poker_table_latest_message_idTopoker_table_message poker_table?               @relation("poker_table_latest_message_idTopoker_table_message")
//  poker_table_poker_tableTopoker_table_message_poker_table_id    poker_table                @relation("poker_tableTopoker_table_message_poker_table_id", fields: [poker_table_id], references: [id])
//  users                                                          User                       @relation(fields: [senderId], references: [id])
//
//}
//
//model poker_table_participant {
//  id                      String      @id
//  seat                    Int         @default(1)
//  action                  String?
//  poker_table_id          String
//  updatedAt               DateTime
//  user_id                 String
//  has_seen_latest_message Boolean
//  bet                     Int?        @default(0)
//  folded                  Boolean     @default(false)
//  hole_cards              String?     @db.LongText
//  show_cards              Boolean     @default(false)
//  stack_size              Int?        @default(1000)
//  left                    Boolean     @default(false)
//  poker_table             poker_table @relation(fields: [poker_table_id], references: [id])
//  users                   User        @relation(fields: [user_id], references: [id])
//
//}
//
//model poker_table_pots {
//  id             String      @id
//  poker_table_id String
//  amount         Int         @default(0)
//  poker_table    poker_table @relation(fields: [poker_table_id], references: [id])
//  users          User[]
//
//}

// schemas/logs.prisma
// Logging and Errors

model login_history {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  browser    String?
  user_id    String
  ip_address String?
  user       User     @relation("user_login_history", fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], map: "login_history_user_id_fkey")
}

model error_log {
  id             Int      @id @default(autoincrement())
  token_id       Int?
  transaction_id Int?
  table_name     String?
  type           String?
  process        String?
  missing_data   Boolean?
  bad_data       Boolean?
  error_msg      String?
  createdAt      DateTime @default(now())
}

// schemas/marketplace.prisma
// Marketplace

model marketplace_category {
  id                    Int                  @id @default(autoincrement())
  name                  String
  marketplace_productId String?
  marketplace_product   marketplace_product? @relation(fields: [marketplace_productId], references: [id])

  @@index([marketplace_productId], map: "marketplace_category_marketplace_productId_fkey")
}

model marketplace_product {
  id                         String                       @id @default(uuid())
  title                      String
  description                String?
  age                        Int?
  price                      Float
  receipt_available          Boolean?                     @default(false)
  warranty_available         Boolean?                     @default(false)
  accessories_available      Boolean?                     @default(false)
  box_available              Boolean?                     @default(false)
  user_id                    String
  status                     MarketProductStatus          @default(PENDING)
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  condition                  String?
  type                       MarketProductType            @default(PHYSICAL_PRODUCT)
  category                   marketplace_category[]
  seller                     User                         @relation(fields: [user_id], references: [id])
  images                     marketplace_product_images[]
  marketplace_product_offers marketplace_product_offers[]

  @@index([user_id], map: "marketplace_product_user_id_fkey")
}

model marketplace_product_images {
  url        String
  product_id String
  product    marketplace_product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@id([url, product_id])
  @@index([product_id])
}

model marketplace_product_offers {
  offer      Float
  product_id String
  product    marketplace_product? @relation(fields: [product_id], references: [id])
  message    String?              @db.Text
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt
  id         String               @id @default(uuid())
  buyer_id   String
  seller_id  String
  expires    DateTime?

  @@index([product_id])
}

// schemas/messaging.prisma
// Messaging and Conversations

model message {
  id                   String         @id @default(uuid())
  conversationId       String
  senderId             String
  body                 String         @db.Text
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  type                 message_type   @default(TEXT)
  status               message_status @default(SENT)
  marketplace_offer_id String?
  is_latest_in         conversation?  @relation("latest_conversation_message")
  conversation         conversation   @relation(fields: [conversationId], references: [id])
  sender               User           @relation(fields: [senderId], references: [id])
  //  offer                offers[]

  @@index([conversationId], map: "message_conversationId_fkey")
  @@index([senderId], map: "message_senderId_fkey")
}

model conversation {
  id                String                     @id @default(uuid())
  createdAt         DateTime                   @default(now())
  updatedAt         DateTime                   @updatedAt
  latest_message_id String?                    @unique
  owner_id          String?
  latest_message    message?                   @relation("latest_conversation_message", fields: [latest_message_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  owner             User?                      @relation(fields: [owner_id], references: [id])
  participants      conversation_participant[]
  messages          message[]

  @@index([latest_message_id], map: "latest_message_id")
  @@index([owner_id], map: "conversation_owner_id_fkey")
}

model conversation_participant {
  id                      String       @id @default(uuid())
  user_id                 String
  conversation_id         String
  createdAt               DateTime     @default(now())
  has_seen_latest_message Boolean
  updatedAt               DateTime     @updatedAt
  conversation            conversation @relation(fields: [conversation_id], references: [id])
  user                    User         @relation(fields: [user_id], references: [id])

  @@index([has_seen_latest_message], map: "has_seen_latest_message")
  @@index([conversation_id], map: "conversation_participant_conversation_id_fkey")
  @@index([user_id], map: "conversation_participant_user_id_fkey")
}

model direct_message {
  id          Int         @id @default(autoincrement())
  content     String
  type        MessageType @default(TEXT)
  sender_id   String
  receiver_id String
  sender      User        @relation("sender", fields: [sender_id], references: [id])
  receiver    User        @relation("receiver", fields: [receiver_id], references: [id])
  createdAt   DateTime    @default(now())
}

model channel_message {
  id              Int         @id @default(autoincrement())
  content         String
  type            MessageType @default(TEXT)
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  channel_id      Int
  channel         channel     @relation(fields: [channel_id], references: [id])
  createdThreadId Int?
  createdThread   thread?     @relation(name: "CreatedThread")
  partOfThreadId  Int?
  partOfThread    thread?     @relation(name: "PartOfThread", fields: [threadId], references: [id])
  createdAt       DateTime    @default(now())
  threadId        Int?
}

model thread {
  id                Int               @id @default(autoincrement())
  startingMessageId Int               @unique
  startingMessage   channel_message?  @relation(name: "CreatedThread", fields: [startingMessageId], references: [id])
  messages          channel_message[] @relation(name: "PartOfThread")
}

model server {
  id            Int             @id @default(autoincrement())
  slug          String?         @unique
  description   String?
  icon          String?
  coverImage    String?
  name          String
  ownerId       String
  owner         User            @relation(fields: [ownerId], references: [id])
  members       User[]          @relation("server_members")
  channels      channel[]
  is_public     Boolean         @default(false)
  roles         role[]
  server_member server_member[]
  Mute          Mute[]
}

model channel {
  id                   Int                    @id @default(autoincrement())
  slug                 String?                @unique
  name                 String
  type                 ChannelType            @default(TEXT)
  topic                String?
  slowModeDelay        Int?
  server_id            Int
  server               server                 @relation(fields: [server_id], references: [id])
  messages             channel_message[]
  channel_read_receipt channel_read_receipt[]
  ChannelRole          ChannelRole[]
  Mute                 Mute[]
}

model server_member {
  userId   String
  serverId Int
  user     User          @relation(fields: [userId], references: [id])
  server   server        @relation(fields: [serverId], references: [id])
  roles    UserToRoles[] @relation("user_roles")

  @@id([userId, serverId])
}

// model ChannelMember {
//   userId    String
//   channelId Int
//   user      User    @relation(fields: [userId], references: [id])
//   channel   channel @relation(fields: [channelId], references: [id])
//   role      role    @relation(fields: [roleId], references: [id])
//   roleId    Int    // Optional, can be null if the member has no specific role

//   @@id([userId, channelId])
// }

model channel_read_receipt {
  userId    String
  channelId Int
  lastRead  DateTime @default(now())
  channel   channel  @relation(fields: [channelId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, channelId])
}

model role {
  id          Int           @id @default(autoincrement())
  name        String
  description String
  serverId    Int
  server      server        @relation(fields: [serverId], references: [id])
  members     UserToRoles[]
}

model UserToRoles {
  id                      Int           @id @default(autoincrement())
  userId                  String
  roleId                  Int
  server_member_user_id   String
  server_member_server_id Int
  user                    User          @relation("user_to_roles", fields: [userId], references: [id])
  role                    role          @relation(fields: [roleId], references: [id])
  server_member           server_member @relation("user_roles", fields: [server_member_user_id, server_member_server_id], references: [userId, serverId])

  @@unique([userId, roleId])
}

model ChannelRole {
  id        Int             @id @default(autoincrement())
  userId    String
  channelId Int
  role      ChannelRoleType
  user      User            @relation(fields: [userId], references: [id])
  channel   channel         @relation(fields: [channelId], references: [id])

  @@unique([userId, channelId])
}

enum ChannelRoleType {
  HOST
  CO_HOST
  SPEAKER
  LISTENER
}

model speak_request {
  id        Int                @id @default(autoincrement())
  userId    String
  channelId Int
  status    SpeakRequestStatus
}

enum SpeakRequestStatus {
  PENDING
  APPROVED
  DENIED
}

model user_badges {
  user_id  String
  badge_id Int
  user     User   @relation(fields: [user_id], references: [id])
  badge    badge  @relation(fields: [badge_id], references: [id])

  @@id([user_id, badge_id])
}

model badge {
  id          Int           @id @default(autoincrement())
  name        String
  description String
  users       user_badges[]
}

model Mute {
  id        Int       @id @default(autoincrement())
  userId    String
  serverId  Int
  channelId Int?
  muteEnd   DateTime?
  user      User      @relation(fields: [userId], references: [id])
  server    server    @relation(fields: [serverId], references: [id])
  channel   channel?  @relation(fields: [channelId], references: [id])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

// schemas/misc.prisma
// Misc TODO: Sort this out?

model odb_tokens {
  token_id           BigInt    @id
  unique_cover_id    String?   @db.VarChar(255)
  type               String?   @db.VarChar(255)
  collectible_id     String?   @db.VarChar(255)
  name               String?   @db.VarChar(255)
  description        String?   @db.Text
  rarity             String?   @db.VarChar(255)
  edition_type       String?   @db.VarChar(10)
  edition            Int?
  total_editions     Int?
  mint_date          DateTime
  drop_date          DateTime? @db.DateTime(0)
  comic_number       Int?
  image_url          String?   @db.Text
  start_year         Int?
  cover_artists      String?   @db.Text
  artists            String?   @db.Text
  writers            String?   @db.Text
  characters         String?   @db.Text
  publisher_name     String?   @db.Text
  series_name        String?   @db.Text
  brand_name         String?   @db.Text
  licensor_name      String?   @db.Text
  last_updated       DateTime? @db.DateTime(0)
  created_at         DateTime? @db.DateTime(0)
  licensor_id        String?   @db.VarChar(255)
  brand_id           String?   @db.VarChar(255)
  series_id          String?   @db.VarChar(255)
  wallet_id          String?   @db.VarChar(255)
  comic_image_url_id String?   @db.VarChar(50)
  mint_order         Int?
  to_process         Boolean?  @default(false)
  is_invalid         Boolean?  @default(false)
  is_burned          Boolean?  @default(false)
  mcp_ed_bonus       Boolean?  @default(false)

  @@index([token_id])
  @@index([comic_image_url_id])
  @@index([collectible_id])
  @@index([wallet_id])
}

model veve_imx_status {
  id             Int       @id @default(autoincrement())
  last_timestamp String?
  last_txn_id    Int?
  table_name     String?   @unique
  next_cursor    String?   @db.Text
  updatedAt      DateTime? @updatedAt
}

model numbers {
  number Int @id
}

model meili_script_logs {
  script_name   String   @id
  last_run_date DateTime
}

model newsletter_subscribers {
  id                  Int                   @id @default(autoincrement())
  email               String                @unique
  ip_address          String?
  createdAt           DateTime              @default(now())
  project_newsletters project_newsletters[]
}

// schemas/notifications.prisma
// Notifications and Alerts

model notifications {
  id           String               @id @default(uuid())
  type         NotificationType     @default(DEFAULT)
  category     NotificationCategory @default(DEFAULT)
  content      String
  createdAt    DateTime             @default(now())
  from_user_id String?
  to_user_id   String?
  read         Boolean              @default(false)
  reference    String?
  project_id   String?
  from_user    User?                @relation("from_notifications", fields: [from_user_id], references: [id], onDelete: Cascade)
  project      projects?            @relation(fields: [project_id], references: [id])
  to_user      User?                @relation("to_notifications", fields: [to_user_id], references: [id], onDelete: Cascade)

  @@index([from_user_id], map: "notifications_from_user_id_fkey")
  @@index([to_user_id], map: "notifications_to_user_id_fkey")
  @@index([project_id], map: "notifications_project_id_fkey")
}

model price_alerts {
  id         Int                 @id @default(autoincrement())
  value      Float
  direction  PriceAlertDirection
  user_id    String?
  project_id String?
  type       CollectibleType     @default(COLLECTIBLE)
  project    projects?           @relation(fields: [project_id], references: [id])
  user       User?               @relation("price_alerts", fields: [user_id], references: [id], onDelete: Cascade)

  @@index([project_id], map: "price_alerts_project_id_fkey")
  @@index([user_id], map: "price_alerts_user_id_fkey")
}

// schemas/projects/mcfarlane/blockchain.prisma
// Blockchain (Tokens, Transfers and Mints)

model mcfarlane_wallets {
  id                  String       @id
  user_id             String?      @unique
  mcfarlane_username  String?      @unique
  mcfarlane_id        String?
  tagsId              Int?
  first_activity_date DateTime?
  last_activity_date  DateTime?
  tags                wallet_tags? @relation(fields: [tagsId], references: [id])
  user                profile?     @relation(fields: [user_id], references: [user_id])

  @@index([tagsId], map: "mcfarlane_wallets_tagsId_fkey")
}

model mcfarlane_transfers {
  id          Int       @id
  from_wallet String
  to_wallet   String
  timestamp   String?   @db.Text
  token_id    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  break_even  Float?
  entry_price Float?

  @@index([token_id, from_wallet, to_wallet])
}

// schemas/projects/veve/blockchain.prisma
// Blockchain (Tokens, Transfers and Mints)

model veve_wallets {
  id                      String                    @id
  user_id                 String?                   @unique
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime?
  veve_username           String?                   @unique
  veve_id                 String?
  merged_to               String?
  tagsId                  Int?
  first_activity_date     DateTime?
  last_activity_date      DateTime?
  lgcy_veve_id            String?
  lgcy_veve_username      String?
  active                  Boolean?                  @default(false)
  has_kyc                 Boolean?                  @default(false)
  is_pre_imx              Boolean?                  @default(false)
  mintalysis_note         String?
  veve_leaderboard        veve_leaderboard[]
  veve_tokens             veve_tokens[]
  wallet_tags             wallet_tags?              @relation(fields: [tagsId], references: [id])
  veve_wallets_valuations veve_wallets_valuations[]
  veve_wallet_metrics     veve_wallet_metrics?
  veve_x_tracker          veve_x_tracker[]

  @@index([last_activity_date])
  @@index([first_activity_date])
  @@index([tagsId], map: "veve_wallets_tagsId_fkey")
  @@index([id, user_id, veve_username])
}

model veve_wallets_valuations {
  id                     Int                 @id @default(autoincrement())
  wallet_id              String
  wallet                 veve_wallets?       @relation(fields: [wallet_id], references: [id])
  timestamp              DateTime            @default(now())
  total_valuation        Decimal?            @db.Decimal(10, 2)
  collectibles_valuation Decimal?            @db.Decimal(10, 2)
  comics_valuation       Decimal?            @db.Decimal(10, 2)
  total_count            Int?
  total_collectibles     Int?
  total_comics           Int?
  type                   WalletValuationType @default(TOTAL)

  @@unique([wallet_id, timestamp])
}

model veve_tokens {
  token_id              Int                    @id
  name                  String?
  edition               Int?
  mint_date             DateTime?              @db.DateTime(6)
  rarity                String?
  collectible_id        String?
  unique_cover_id       String?
  type                  String?                @db.Text
  created_at            DateTime?              @default(now()) @db.DateTime(6)
  last_updated          DateTime?              @db.DateTime(6)
  brand_id              String?
  licensor_id           String?
  series_id             String?
  wallet_id             String?
  element_id            String?
  comic_image_url_id    String?                @db.VarChar(50)
  mint_order            Int?
  rarity_mint_order     Int?
  mcp_ed_bonus          Boolean?               @default(false)
  to_process            Boolean?               @default(false)
  is_invalid            Boolean?               @default(false)
  is_burned             Boolean?               @default(false)
  no_meta               Boolean?               @default(false)
  is_premint            Boolean?               @default(false)
  has_full_meta         Boolean?               @default(false)
  mintalysis_note       String?
  tag                   String?
  veve_brands           brands?                @relation(fields: [brand_id], references: [brand_id])
  veve_wallets          veve_wallets?          @relation(fields: [wallet_id], references: [id], map: "veve_tokens_ibfk_1")
  veve_licensors        licensors?             @relation(fields: [licensor_id], references: [licensor_id])
  veve_series           veve_series?           @relation(fields: [series_id], references: [series_id])
  veveTokenCollectibles veveTokenCollectible[]
  veveTokenComics       veveTokenComic[]

  @@index([brand_id], map: "veve_tokens_brand_id_fkey")
  @@index([licensor_id], map: "veve_tokens_licensor_id_fkey")
  @@index([series_id], map: "veve_tokens_series_id_fkey")
  @@index([wallet_id], map: "veve_tokens_ibfk_1")
  @@index([collectible_id])
  @@index([comic_image_url_id])
  @@index([unique_cover_id])
  @@index([edition])
}

model veveTokenCollectible {
  token_id          Int
  collectible_id    String
  veve_tokens       veve_tokens       @relation(fields: [token_id], references: [token_id])
  veve_collectibles veve_collectibles @relation(fields: [collectible_id], references: [collectible_id])

  @@id([token_id, collectible_id])
}

model veveTokenComic {
  token_id        Int
  unique_cover_id String
  veve_tokens     veve_tokens @relation(fields: [token_id], references: [token_id])
  veve_comics     veve_comics @relation(fields: [unique_cover_id], references: [unique_cover_id])

  @@id([token_id, unique_cover_id])
}

model veve_transfers {
  id              Int       @id
  from_wallet     String
  to_wallet       String
  timestamp       String?   @db.Text
  token_id        Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime?
  to_process      Boolean?  @default(false)
  break_even      Float?
  entry_price     Float?
  break_even_new  Float?
  entry_price_new Float?
  timestamp_dt    DateTime? @db.DateTime(6)
  txn_type        String?
  is_burned       Boolean?  @default(false)
  mintalysis_note String?

  @@index([createdAt])
  @@index([timestamp_dt])
  @@index([token_id, createdAt])
  @@index([token_id, from_wallet, to_wallet])
  @@index([to_wallet, from_wallet])
  @@index([from_wallet])
  @@index([to_wallet])
}

model veve_mints {
  id              Int       @id
  wallet_id       String?
  timestamp       String?   @db.Text
  token_id        Int
  to_process      Boolean?  @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime?
  timestamp_dt    DateTime? @db.DateTime(6)
  is_burned       Boolean?  @default(false)
  is_redemption   Boolean?  @default(false)
  transfer_count  Int?      @default(0)
  mintalysis_note String?

  @@index([createdAt])
  @@index([timestamp_dt])
  @@index([wallet_id, token_id])
  @@index([token_id])
  @@index([wallet_id])
}

// schemas/projects/veve/collectibles.prisma
// Veve Collectibles

model veve_collectibles {
  collectible_id                       String                           @id
  name                                 String?
  rarity                               String?
  description                          String?                          @db.Text
  edition_type                         String?
  store_price                          Decimal?                         @db.Decimal(10, 2)
  drop_date                            DateTime?
  market_fee                           Decimal?                         @db.Decimal(10, 3)
  createdAt                            DateTime                         @default(now())
  updatedAt                            DateTime?
  background_image_direction           String?
  background_image_full_resolution_url String?
  background_image_high_resolution_url String?
  background_image_low_resolution_url  String?
  background_image_med_resolution_url  String?
  background_image_thumbnail_url       String?
  background_image_url                 String?
  image_direction                      String?
  image_full_resolution_url            String?
  image_high_resolution_url            String?
  image_low_resolution_url             String?
  image_med_resolution_url             String?
  image_thumbnail_url                  String?
  image_url                            String?
  is_unlimited                         Boolean?                         @default(false)
  total_available                      Int?
  total_issued                         Int?
  total_likes                          Int?
  variety                              String?
  brand_id                             String?
  licensor_id                          String?
  series_id                            String?
  project_id                           String?
  drop_method                          String?
  is_free                              Boolean?                         @default(false)
  total_store_allocation               Int?
  slug                                 String?                          @unique
  unique_holders                       BigInt?
  first_public_mint                    Int?
  first_public_rarity_mint             Int?
  mcp_low_ed_limit                     Int?
  mcp_base_value                       Int?
  mcp_rarity_value                     Decimal?                         @db.Decimal(4, 2)
  mcp_total_value                      Decimal?                         @db.Decimal(5, 2)
  is_name_unique                       Boolean?                         @default(false)
  total_burned                         Int?
  mintalysis_note                      String?
  veve_held_edition_count              Int?
  licensor_held_edition_count          Int?
  tmp_veve_tokens_collectibles         tmp_veve_tokens_collectibles[]
  brand                                brands?                          @relation(fields: [brand_id], references: [brand_id])
  licensor                             licensors?                       @relation(fields: [licensor_id], references: [licensor_id])
  series                               veve_series?                     @relation(fields: [series_id], references: [series_id])
  metrics                              veve_collectibles_metrics?
  translations                         veve_collectibles_translations[]
  veve_watchlist                       veve_watchlist[]
  //veve_tokens                          veve_tokens[]                    @relation("veve_collectiblesToveve_tokens")
  veveTokenCollectibles                veveTokenCollectible[]
  tags                                 veve_collectible_tags[]
  project                              projects?                        @relation(fields: [project_id], references: [id])
  veve_profile                         veve_profile[]

  @@index([brand_id], map: "collectibles_brand_id_fkey")
  @@index([licensor_id], map: "collectibles_licensor_id_fkey")
  @@index([name], map: "collectibles_name_idx")
  @@index([series_id], map: "collectibles_series_id_fkey")
  @@index([project_id], map: "veve_collectibles_project_id_fkey")
}

model veve_collectibles_translations {
  collectible_id  String
  name            String?
  description     String?           @db.Text
  ai_description  String?           @db.Text
  seo_description String?           @db.Text
  seo_keywords    String?           @db.Text
  seo_title       String?           @db.Text
  og_title        String?           @db.Text
  og_description  String?           @db.Text
  language        Language
  edition_type    String?
  rarity          String?
  collectible     veve_collectibles @relation(fields: [collectible_id], references: [collectible_id])

  @@id([language, collectible_id])
  @@index([language])
  @@index([collectible_id], map: "veve_collectibles_translations_collectible_id_fkey")
}

model veve_collectibles_metrics {
  collectible_id     String            @id
  all_time_high      Decimal?          @db.Decimal(10, 2)
  all_time_low       Decimal?          @db.Decimal(10, 2)
  floor_price        Decimal?          @db.Decimal(10, 2)
  market_cap         Decimal?          @db.Decimal(10, 2)
  one_day_change     Decimal?          @db.Decimal(10, 2)
  one_mo_change      Decimal?          @db.Decimal(10, 2)
  one_wk_change      Decimal?          @db.Decimal(10, 2)
  one_year_change    Decimal?          @db.Decimal(10, 2)
  six_mo_change      Decimal?          @db.Decimal(10, 2)
  three_mo_change    Decimal?          @db.Decimal(10, 2)
  total_listings     Int?
  total_issued       Int?
  all_time_change    Decimal?          @db.Decimal(10, 2)
  volume             Decimal?          @db.Decimal(10, 2)
  circulating_supply Decimal?          @db.Decimal(10, 2)
  collectible        veve_collectibles @relation(fields: [collectible_id], references: [collectible_id])
}

model veve_collectible_tags {
  tag_id         Int               @id @default(autoincrement())
  name           String
  collectible_id String
  collectible    veve_collectibles @relation(fields: [collectible_id], references: [collectible_id])

  @@index([collectible_id], name: "idx_collectible_tags")
}

model veve_collectibles_listings {
  id             Int       @id @default(autoincrement())
  collectible_id String
  listing_id     String?
  issue_number   Int?
  listing_type   String
  price          Decimal?
  seller_name    String?
  seller_id      String?
  ending_at      DateTime?
  bid_count      Int?
}

// schemas/projects/veve/comics.prisma
// Veve Comics

model veve_comics {
  unique_cover_id             String                     @id
  name                        String
  rarity                      String?
  description                 String?                    @db.Text
  comic_series_id             String?
  drop_date                   DateTime?
  store_price                 Decimal?                   @db.Decimal(10, 2)
  publisher_id                String?
  market_fee                  Decimal?                   @db.Decimal(10, 3)
  createdAt                   DateTime                   @default(now())
  updatedAt                   DateTime
  all_time_high               Decimal?                   @db.Decimal(10, 2)
  all_time_low                Decimal?                   @db.Decimal(10, 2)
  comic_number                Int?
  drop_method                 String?
  floor_price                 Decimal?                   @db.Decimal(10, 2)
  is_free                     Boolean?                   @default(false)
  is_unlimited                Boolean?                   @default(false)
  market_cap                  Decimal?                   @db.Decimal(10, 2)
  one_day_change              Decimal?                   @db.Decimal(10, 2)
  one_mo_change               Decimal?                   @db.Decimal(10, 2)
  one_wk_change               Decimal?                   @db.Decimal(10, 2)
  one_year_change             Decimal?                   @db.Decimal(10, 2)
  page_count                  Int?
  six_mo_change               Decimal?                   @db.Decimal(10, 2)
  start_year                  Int?
  three_mo_change             Decimal?                   @db.Decimal(10, 2)
  total_available             Int?
  total_issued                Int?
  total_listings              Int?
  image_direction             String?
  image_full_resolution_url   String?
  image_high_resolution_url   String?
  image_low_resolution_url    String?
  image_med_resolution_url    String?
  image_thumbnail             String?
  all_time_change             Decimal?                   @db.Decimal(10, 2)
  minimum_age                 Int?
  slug                        String?                    @unique
  comic_id                    String?
  unique_holders              BigInt?
  first_public_mint           Int?
  first_public_rarity_mint    Int?
  mcp_low_ed_limit            Int?
  mcp_rarity_value            Decimal?                   @db.Decimal(10, 2)
  comic_image_url_id          String?                    @unique @db.VarChar(50)
  total_burned                Int?
  pre_imx_unique_name         Boolean?                   @default(false)
  veve_held_edition_count     Int?
  licensor_held_edition_count Int?
  mintalysis_note             String?
  translations                veve_comics_translations[]
  veve_watchlist              veve_watchlist[]
  artists                     artists[]                  @relation("artistsToveve_comics")
  characters                  characters[]               @relation("charactersToveve_comics")
  writers                     writers[]                  @relation("veve_comicsTowriters")
  veveTokenComics             veveTokenComic[]
  project_id                  String?
  project                     projects?                  @relation(fields: [project_id], references: [id])
  artists_grails              artists_grails[]
  characters_grails           characters_grails[]
  writers_grails              writers_grails[]

  @@index([unique_cover_id], map: "unique_cover_id")
  @@index([comic_image_url_id], map: "comic_image_url_id")
  @@index([project_id], map: "veve_comics_project_id_fkey")
}

model veve_comics_translations {
  unique_cover_id        String
  name                   String?
  description            String?     @db.Text
  rarity_formatted       String?
  edition_type_formatted String?
  language               Language
  comic                  veve_comics @relation(fields: [unique_cover_id], references: [unique_cover_id])

  @@id([language, unique_cover_id])
  @@index([language])
  @@index([unique_cover_id], map: "veve_comics_translations_unique_cover_id_fkey")
}

// schemas/projects/veve/leaderboards.prisma
// Veve Leaderboards

model veve_leaderboard {
  id          Int          @id @default(autoincrement())
  leader_type String
  wallet_id   String
  count       Int
  datetime    String?
  created_at  DateTime     @default(now())
  updated_at  DateTime?    @updatedAt
  tag         String?
  wallet      veve_wallets @relation(fields: [wallet_id], references: [id])

  @@index([wallet_id], map: "veve_leaderboard_wallet_id_fkey")
}

model veve_wallet_metrics {
  id                  Int          @id @default(autoincrement())
  datetime            DateTime?    @db.DateTime(0)
  rank                Int?         @unique
  prev_rank           Int?         @unique
  rank_change         Int?
  wallet_id           String       @unique
  mint_count          Int?
  purchase_count      Int?
  sale_count          Int?
  net_accum           Int?
  transfer_count      Int?
  total_tokens        Int?
  total_comics        Int?
  total_collectibles  Int?
  total_artist_proofs Int?
  total_C             Int?
  total_UC            Int?
  total_R             Int?
  total_UR            Int?
  total_SR            Int?
  comic_set_count     Int?
  unique_comic_sets   Int?
  coll_set_count      Int?
  unique_coll_sets    Int?
  total_burned        Int?
  omi_balance         Float?
  total_mcp_pts       Float?
  daily_mcp_pts       Float?
  mcp_level           Int?
  mcp_rank            String?
  created_at          DateTime     @default(now())
  updated_at          DateTime?    @updatedAt
  wallet              veve_wallets @relation(fields: [wallet_id], references: [id])

  @@index([wallet_id], map: "veve_wallet_metrics_wallet_id_fkey")
}

model veve_wallet_token_counts {
  id                Int       @id @default(autoincrement())
  wallet_id         String
  collectible_id    String?
  unique_cover_id   String?
  collectible_count Int?
  comic_count       Int?
  created_at        DateTime  @default(now())
  updated_at        DateTime? @updatedAt
}

model veve_x_tracker {
  id          Int          @id @default(autoincrement())
  wallet_id   String
  date        DateTime     @db.Date
  sales       Int?
  purchases   Int?
  mints       Int?
  token_count Int?
  omi_change  Float?
  created_at  DateTime     @default(now())
  wallet      veve_wallets @relation(fields: [wallet_id], references: [id])

  @@index([wallet_id], map: "veve_x_tracker_wallet_id_fkey")
}

// schemas/projects/veve/licensors.prisma
// Veve Licensors

model licensors {
  licensor_id                         String                   @id
  name                                String?
  description                         String?                  @db.Text
  landscape_image_direction           String?
  landscape_image_full_resolution_url String?
  landscape_image_high_resolution_url String?
  landscape_image_low_resolution_url  String?
  landscape_image_med_resolution_url  String?
  landscape_image_thumbnail_url       String?
  landscape_image_url                 String?
  market_fee                          Decimal?                 @db.Decimal(10, 3)
  square_image_direction              String?
  square_image_full_resolution_url    String?
  square_image_high_resolution_url    String?
  square_image_low_resolution_url     String?
  square_image_med_resolution_url     String?
  square_image_thumbnail_url          String?
  square_image_url                    String?
  slug                                String?                  @unique
  veve_collectibles                   veve_collectibles[]
  veve_tokens                         veve_tokens[]
  createdAt                           DateTime                 @default(now())
  updatedAt                           DateTime?                @updatedAt
  metrics                             veve_licensors_metrics[]
}

model veve_licensors_metrics {
  licensor_id        String    @id
  all_time_high      Decimal?  @db.Decimal(10, 2)
  all_time_low       Decimal?  @db.Decimal(10, 2)
  floor_price        Decimal?  @db.Decimal(10, 2)
  market_cap         Decimal?  @db.Decimal(10, 2)
  one_day_change     Decimal?  @db.Decimal(10, 2)
  one_mo_change      Decimal?  @db.Decimal(10, 2)
  one_wk_change      Decimal?  @db.Decimal(10, 2)
  one_year_change    Decimal?  @db.Decimal(10, 2)
  six_mo_change      Decimal?  @db.Decimal(10, 2)
  three_mo_change    Decimal?  @db.Decimal(10, 2)
  total_listings     Int?
  all_time_change    Decimal?  @db.Decimal(10, 2)
  volume             Decimal?  @db.Decimal(10, 2)
  circulating_supply Decimal?  @db.Decimal(10, 2)
  licensor           licensors @relation(fields: [licensor_id], references: [licensor_id])
}

// schemas/projects/veve/mcp.prisma
// VeVe MCP Calculation

model veve_mcp_daily_pts {
  id            Int       @id @default(autoincrement())
  wallet_id     String    @unique
  mcp_daily_pts Json?
  mcp_total_pts Decimal?  @default(0)
  updated_at    DateTime? @updatedAt
  created_at    DateTime  @default(now())
}

model veve_mcp_staging {
  id                 Int       @id @default(autoincrement())
  username           String?
  wallet_id          String?
  transaction_id     Int?
  token_id           Int?
  from_wallet        String?
  buyer_username     String?
  to_wallet          String?
  seller_username    String?
  timestamp          DateTime?
  txn_type           String?
  gem_amount         Float?
  type               String?
  edition            Int?
  rarity             String?
  collectible_id     String?
  comic_image_url_id String?
  series_id          String?
  nbr_of_items       Int?
  comic_low_ed_limit Int?
  comic_rarity_value Decimal?  @db.Decimal(10, 2)
  coll_base_value    Int?
  coll_dup_value     Decimal?  @db.Decimal(10, 2)
  coll_rarity_value  Decimal?  @db.Decimal(10, 2)
  coll_low_ed_limit  Int?
  created_at         DateTime  @default(now())
  updated_at         DateTime? @updatedAt
}

model veve_mcp_completed_sets {
  id              Int       @id @default(autoincrement())
  wallet_id       String
  series_id       String
  nbr_of_items    Int?
  date_completed  DateTime
  completed_count Int?
  date_set_broken DateTime?
  updated_at      DateTime? @updatedAt
  created_at      DateTime  @default(now())
}

model veve_mcp_staging_sets {
  id             Int       @id @default(autoincrement())
  wallet_id      String
  series_id      String?
  collectible_id String?
  count          Int?
  updated_at     DateTime? @updatedAt
  created_at     DateTime  @default(now())
}

model veve_mcp_staging_csv_import {
  id              Int      @id @default(autoincrement())
  wallet_id       String?
  txn_date        String?
  txn_type        String?
  item_name       String?
  edition         String?
  buyer_username  String?
  seller_username String?
  gem_amount      String?
  created_at      DateTime @default(now())
}

model veve_mcp_staging_csv_import_sets {
  id                 Int       @id @default(autoincrement())
  wallet_id          String
  series_id          String
  series_name        String?
  nbr_of_items       Int?
  daily_mcp_pts      Float?
  date_set_completed DateTime?
  date_set_broken    DateTime?
  updated_at         DateTime? @updatedAt
  created_at         DateTime  @default(now())
}

model veve_mcp_output {
  id                 Int       @id @default(autoincrement())
  mcp_date           DateTime
  wallet_id          String
  mint_count         Int?
  mint_points        Int?
  mkt_purchase_count Int?
  mkt_purchase_pts   Int?
  col_count          Int?
  col_pts            Int?
  col_rarity_bonus   Float?
  col_low_ed_bonus   Float?
  col_dup_bonus      Float?
  col_set_count      Int?
  col_set_bonus      Int?
  col_dup_set_bonus  Int?
  comic_count        Int?
  comic_pts          Float?
  comic_rarity_bonus Float?
  comic_low_ed_bonus Float?
  comic_dup_bonus    Float?
  omi_balance        Float?
  omi_mcp_pts        Float?
  total_col_pts      Float?
  total_comic_pts    Float?
  total_daily_pts    Float?    @default(0)
  total_mcp_pts      Float?    @default(0)
  mcp_level          String?
  mcp_rank           String?
  updated_at         DateTime? @updatedAt
  created_at         DateTime  @default(now())
}

model veve_mcp_rank {
  id         Int       @id @default(autoincrement())
  rank       String
  min_points Int
  max_points Int
  updated_at DateTime? @updatedAt
  created_at DateTime  @default(now())
}

model veve_mcp_level {
  id         Int       @id @default(autoincrement())
  level      String
  min_points Int
  max_points Int
  updated_at DateTime? @updatedAt
  created_at DateTime  @default(now())
}

model tmp_veve_news {
  id            Int       @id @default(autoincrement())
  original_link String
  content       String    @db.Text
  title         String
  subtitle      String?   @db.Text
  published_at  DateTime
  image         String?
  tags          String?
  slug          String?   @unique
  author_id     String?   @default("771849d5-5701-452a-b4ae-a67ddfe92fe3")
  project_id    String?   @default("de2180a8-4e26-402a-aed1-a09a51e6e33d")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
}

// schemas/projects/veve/omi.prisma
// OMI Transactions

model omi_transfers {
  id             Int      @id @default(autoincrement())
  transaction_id Int      @unique
  status         String
  user           String
  receiver       String
  token_address  String
  decimals       Int
  quantity       String
  timestamp      DateTime
  createdAt      DateTime @default(now())
  to_process     Boolean? @default(true)

  @@index([transaction_id])
}

model omi_vault_transactions {
  id               Int       @id @default(autoincrement())
  blockchain       String?
  transaction_hash String?   @unique
  from_address     String?
  to_address       String?
  date_time        DateTime?
  omi_amount       Float?
  omi_price        Float?
  usd_value        Float?
  updated_at       DateTime? @updatedAt
  created_at       DateTime? @default(now())
  to_process       Boolean?  @default(true)
}

model omi_burn_sheet {
  id               Int       @id @default(autoincrement())
  date             DateTime?
  day_order        Int?
  omi_price        Float?
  omi_usd          Float?
  pri_omi_burns    Float?
  sec_omi_burns    Float?
  pri_usd_value    Float?
  sec_usd_value    Float?
  gem_omi_burns    Float?
  gem_usd_value    Float?
  total_omi_burns  Float?
  pct_omi_burns    Float?
  total_gems_usd   Float?
  pct_gems_usd     Float?
  gems_in_app      Float?
  gem_growth_ratio Int?
  total_purch_fees Float?
  drop_type        String?
  drop_name        String?
  updated_at       DateTime? @updatedAt
  created_at       DateTime? @default(now())
}

model omi_metrics {
  id                  Int       @id @default(autoincrement())
  date                DateTime?
  omi_price           Float?
  active_circ_supply  Float?
  maximum_supply      Float?
  active_circ_mkt_cap Float?
  max_supply_mkt_cap  Float?
  vault_l1_omi        Float?
  vault_l2_omi        Float?
  vault_l1_stg_omi    Float?
  reserve_l1_omi      Float?
  reserve_l2_omi      Float?
  reserve_l1_stg_omi  Float?
  burn_l1_omi         Float?
  burn_l2_omi         Float?
  burn_l1_stg_omi     Float?
  pct_omi_burns       Float?
  locked__l1_omi      Float?
  pct_locked_omi      Float?
  omi_holders_l2      Int?
  omi_held_l2         Float?
  omi_holders_l1      Int?
  omi_held_l1         Float?
  omi_holders_gochain Int?
  omi_held_gochain    Float?
  omi_24h_vol         Float?
  omi_24h_low         Float?
  omi_24h_high        Float?
  omi_24h_change      Float?
  omi_7d_change       Float?
  omi_30d_change      Float?
  omi_90d_change      Float?
  omi_180d_change     Float?
  omi_365d_change     Float?
  omi_all_time_high   Float?
  omi_all_time_low    Float?
  updated_at          DateTime? @updatedAt
  created_at          DateTime? @default(now())
}

// schemas/projects/veve/profile.prisma
// VeVe User Profile

model veve_profile {
  id                String             @id @default(uuid())
  userId            String             @unique
  verification_code Int?
  user              User               @relation(fields: [userId], references: [id])
  edition           Int?
  collectible_id    String?
  collectible       veve_collectibles? @relation(fields: [collectible_id], references: [collectible_id])
  verified          Boolean            @default(false)
  requestedAt       DateTime?
}

// schemas/projects/veve/series.prisma
// Veve Series

model veve_series {
  series_id                                  String                @id
  name                                       String?
  description                                String?               @db.Text
  season                                     Int?
  is_blindbox                                Boolean?              @default(false)
  theme_logo_image_url                       String?
  theme_logo_image_thumbnail_url             String?
  theme_logo_image_low_resolution_url        String?
  theme_logo_image_med_resolution_url        String?
  theme_logo_image_full_resolution_url       String?
  theme_logo_image_high_resolution_url       String?
  theme_logo_image_direction                 String?
  theme_background_image_url                 String?
  theme_background_image_thumbnail_url       String?
  theme_background_image_low_resolution_url  String?
  theme_background_image_med_resolution_url  String?
  theme_background_image_full_resolution_url String?
  theme_background_image_high_resolution_url String?
  theme_background_image_direction           String?
  theme_footer_image_url                     String?
  theme_footer_image_thumbnail_url           String?
  theme_footer_image_low_resolution_url      String?
  theme_footer_image_med_resolution_url      String?
  theme_footer_image_full_resolution_url     String?
  theme_footer_image_high_resolution_url     String?
  theme_footer_image_direction               String?
  landscape_image_url                        String?
  landscape_image_thumbnail_url              String?
  landscape_image_low_resolution_url         String?
  landscape_image_med_resolution_url         String?
  landscape_image_full_resolution_url        String?
  landscape_image_high_resolution_url        String?
  landscape_image_direction                  String?
  square_image_url                           String?
  square_image_thumbnail_url                 String?
  square_image_low_resolution_url            String?
  square_image_med_resolution_url            String?
  square_image_full_resolution_url           String?
  square_image_high_resolution_url           String?
  square_image_direction                     String?
  licensor_id                                String
  brand_id                                   String
  slug                                       String?               @unique
  nbr_of_items                               Int?
  mcp_series_value                           Int?
  veve_collectibles                          veve_collectibles[]
  veve_tokens                                veve_tokens[]
  createdAt                                  DateTime              @default(now())
  updatedAt                                  DateTime?             @updatedAt
  metrics                                    veve_series_metrics[]

  @@index([brand_id], map: "series_brand_id_fkey")
  @@index([licensor_id], map: "series_licensor_id_fkey")
}

model veve_series_metrics {
  series_id          String      @id
  all_time_high      Decimal?    @db.Decimal(10, 2)
  all_time_low       Decimal?    @db.Decimal(10, 2)
  floor_price        Decimal?    @db.Decimal(10, 2)
  market_cap         Decimal?    @db.Decimal(10, 2)
  one_day_change     Decimal?    @db.Decimal(10, 2)
  one_mo_change      Decimal?    @db.Decimal(10, 2)
  one_wk_change      Decimal?    @db.Decimal(10, 2)
  one_year_change    Decimal?    @db.Decimal(10, 2)
  six_mo_change      Decimal?    @db.Decimal(10, 2)
  three_mo_change    Decimal?    @db.Decimal(10, 2)
  total_listings     Int?
  all_time_change    Decimal?    @db.Decimal(10, 2)
  volume             Decimal?    @db.Decimal(10, 2)
  circulating_supply Decimal?    @db.Decimal(10, 2)
  series             veve_series @relation(fields: [series_id], references: [series_id])
}

// schemas/projects/veve/watchlist.prisma
// Watchlist

model veve_watchlist {
  id                String             @id
  user_id           String
  collectible_id    String?
  unique_cover_id   String?
  veve_collectibles veve_collectibles? @relation(fields: [collectible_id], references: [collectible_id])
  veve_comics       veve_comics?       @relation(fields: [unique_cover_id], references: [unique_cover_id])
  users             User               @relation(fields: [user_id], references: [id])
}

// schemas/projects.prisma
// Projects

//TODO: Rename projects to collection and comb apply changes throughout the typedefs and resolvers + fe
model projects {
  id                String                @id @default(uuid())
  name              String?               @unique
  abbr              String?               @unique
  active            Boolean               @default(false)
  icon              String?
  slug              String?               @unique
  sort              Int                   @default(10)
  tile              String?
  motiff_url        String?
  article           article[]
  notifications     notifications[]
  price_alerts      price_alerts[]
  metrics           projects_metrics[]
  newsletters       project_newsletters[]
  veveCollectibles  veve_collectibles[]
  veveComics        veve_comics[]
  UserToProjects    UserToProjects[]
  x_account         x_account[]
  youtube_account   youtube_account?
  instagram_account instagram_account[]
}

model projects_metrics {
  project_id      String   @id
  market_cap      Decimal? @db.Decimal(20, 2)
  one_day_change  Decimal? @db.Decimal(10, 2)
  one_mo_change   Decimal? @db.Decimal(10, 2)
  one_wk_change   Decimal? @db.Decimal(10, 2)
  one_year_change Decimal? @db.Decimal(10, 2)
  six_mo_change   Decimal? @db.Decimal(10, 2)
  three_mo_change Decimal? @db.Decimal(10, 2)
  total_listings  Int?
  token_count     Int?
  mint_count      Int?
  transfer_count  Int?
  unique_holders  Int?
  total_wallets   Int?
  all_time_change Decimal? @db.Decimal(10, 2)
  volume          Decimal? @db.Decimal(10, 2)
  project         projects @relation(fields: [project_id], references: [id])
}

model project_newsletters {
  id            Int                    @id @default(autoincrement())
  project_id    String
  subscriber_id Int
  projects      projects               @relation(fields: [project_id], references: [id])
  subscribers   newsletter_subscribers @relation(fields: [subscriber_id], references: [id])

  @@unique([project_id, subscriber_id])
}

model UserToProjects {
  userId              String
  collectionId        String
  user                User     @relation(fields: [userId], references: [id])
  project             projects @relation(fields: [collectionId], references: [id])
  valuation           Decimal? @db.Decimal(20, 2)
  valuation_with_fees Decimal? @db.Decimal(20, 2)

  @@id([userId, collectionId])
}

// schemas/session.prisma
// Session and Authentication Management

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  expires      DateTime
  sessionToken String   @unique @map("session_token")
  accessToken  String?  @map("access_token")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "sessions_user_id_fkey")
  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Account {
  userId            String   @map("user_id")
  providerAccountId String   @map("provider_account_id")
  access_token      String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  expires_at        Int?
  id_token          String?  @db.Text
  provider          String
  refresh_token     String?  @db.Text
  scope             String?
  token_type        String?
  type              String?
  id                String   @id @default(cuid())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "accounts_user_id_fkey")
  @@map("accounts")
}

// schemas/socialmedia.prisma
// Social Media Stats (X - Formely Twitter, YouTube, Instagram)

model x_account {
  id           Int                  @id @default(autoincrement())
  handle       String               @unique
  avatar       String?
  followers    Int                  @default(0)
  following    Int                  @default(0)
  cover_photo  String?
  display_name String?
  join_date    DateTime?
  project_id   String?
  project      projects?            @relation(fields: [project_id], references: [id])
  x_posts      x_posts[]
  createdAt    DateTime?            @default(now())
  snapshots    x_account_snapshot[]
}

model x_account_snapshot {
  id        Int       @id @default(autoincrement())
  handle    String
  followers Int
  following Int
  createdAt DateTime  @default(now())
  x_account x_account @relation(fields: [handle], references: [handle])
}

model x_posts {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime? @default(now())
  link          String?
  text          String?   @db.Text
  image         String?
  like_count    Int?
  comment_count Int?
  repost_count  Int?
  handle        String
  account       x_account @relation(fields: [handle], references: [handle])
}

model youtube_account {
  id          Int                        @id @default(autoincrement())
  channel_id  String                     @unique
  subscribers Int                        @default(0)
  videos      Int                        @default(0)
  views       Int                        @default(0)
  createdAt   DateTime                   @default(now())
  project_id  String?                    @unique
  project     projects?                  @relation(fields: [project_id], references: [id])
  snapshots   youtube_account_snapshot[]
}

model youtube_account_snapshot {
  id          Int             @id @default(autoincrement())
  channel_id  String
  subscribers Int             @default(0)
  videos      Int             @default(0)
  views       Int             @default(0)
  createdAt   DateTime        @default(now())
  youtube     youtube_account @relation(fields: [channel_id], references: [channel_id])
}

model instagram_account {
  id           Int                          @id @default(autoincrement())
  instagram_id String                       @unique
  followers    Int                          @default(0)
  createdAt    DateTime                     @default(now())
  project_id   String?
  project      projects?                    @relation(fields: [project_id], references: [id])
  snapshots    instagram_account_snapshot[]
}

model instagram_account_snapshot {
  id           Int               @id @default(autoincrement())
  instagram_id String
  followers    Int
  createdAt    DateTime          @default(now())
  instagram    instagram_account @relation(fields: [instagram_id], references: [instagram_id])
}

// schemas/tags.prisma
// Tags

model wallet_tags {
  id                Int                 @id @default(autoincrement())
  name              String              @unique
  mcfarlane_wallets mcfarlane_wallets[]
  veve_wallets      veve_wallets[]
}

// schemas/tmp.prisma
// Temporal and Staging

model tmp_wallet_owner {
  wallet_id      String  @id
  owner_id       String? @db.VarChar(191)
  owner_username String? @db.VarChar(191)
}

model tmp_tokens_wallets {
  token_id  Int     @id
  wallet_id String? @db.VarChar(191)
}

model tmp_veve_tokens_collectibles {
  id                  Int                @id @default(autoincrement())
  blockchain_id       String?            @unique
  owner_id            String?
  owner_username      String?
  collectible_type_id String?
  transaction_id      String?
  connector_id        String?            @unique
  txn_cursor          String?
  veve_collectibles   veve_collectibles? @relation(fields: [collectible_type_id], references: [collectible_id])

  @@index([collectible_type_id], map: "tmp_veve_tokens_collectibles_collectible_type_id_fkey")
}

model tmp_veve_transactions {
  transaction_id           String?
  transfer_id              String?
  createdAt                DateTime?
  amount_usd               Float?
  buyer_id                 String?
  buyer_username           String?
  seller_id                String?
  seller_username          String?
  collectible_type_id      String?
  id                       Int       @id @default(autoincrement())
  connector_id             String?
  fee_gem                  Float?
  fee_rate                 Float?
  status                   String?
  type                     String?
  tmp_veve_tokens_comicsId Int?
}

model tmp_veve_tokens_comics {
  id                          Int                           @id @default(autoincrement())
  connector_id                String?                       @unique
  blockchain_id               String?
  owner_id                    String?
  owner_username              String?
  comic_id                    String?
  transaction_id              String?
  txn_cursor                  String?
  tmp_veve_comic_transactions tmp_veve_comic_transactions[]
}

model tmp_veve_comic_transactions {
  id              Int                     @id @default(autoincrement())
  transaction_id  String?
  transfer_id     String?
  connector_id    String?
  createdAt       DateTime?
  status          String?
  type            String?
  fee_rate        Float?
  fee_gem         Float?
  amount_usd      Float?
  buyer_id        String?
  buyer_username  String?
  seller_id       String?
  seller_username String?
  transactions    tmp_veve_tokens_comics? @relation(fields: [connector_id], references: [connector_id])

  @@index([connector_id], map: "tmp_veve_comic_transactions_connector_id_fkey")
}

model tmp_medium_article_ids {
  id         Int    @id @default(autoincrement())
  article_id String
}

model tmp_medium_article_html {
  id            Int     @id @default(autoincrement())
  article_id    String  @unique
  html          String  @db.Text
  date          String?
  image         String?
  subtitle      String? @db.Text
  title         String? @db.Text
  updated_html  String? @db.Text
  semantic_html String? @db.Text
}

model tmp_cursors {
  id             Int      @id @default(autoincrement())
  collectible_id String?
  cursor         String
  date           DateTime @default(now())
  brand_id       String?
  rarity         String?
  comic_id       String?
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model tmp_wallet_merges {
  date        DateTime @db.DateTime(0)
  from_wallet String   @db.VarChar(255)
  to_wallet   String   @db.VarChar(255)

  @@map("_tmp_wallet_merges")
  @@ignore
}

model tmp_veve_transfers {
  id        BigInt?
  from_user String? @db.Text
  to_user   String? @db.Text
  timestamp String? @db.Text
  token_id  BigInt?

  @@index([token_id], map: "token_id")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model tmp_veve_mints {
  id        BigInt?
  user      String? @db.Text
  timestamp String? @db.Text
  token_id  BigInt?

  @@ignore
}

model transfers {
  id        BigInt?
  from_user String? @db.Text
  to_user   String? @db.Text
  timestamp String? @db.Text
  token_id  BigInt?

  @@index([token_id], map: "token_id")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model mints {
  id        BigInt?
  user      String? @db.Text
  timestamp String? @db.Text
  token_id  BigInt?

  @@ignore
}

model temp_wallet_token_ownership {
  id              Int      @id @default(autoincrement())
  wallet_id       String
  token_id        Int
  date            DateTime
  owned           Boolean
  collectible_id  String?
  unique_cover_id String?

  @@index([wallet_id, date])
  @@index([token_id, date])
}

// schemas/user.prisma
// User and Role Management

model User {
  id                              String                           @id @default(uuid())
  email                           String?                          @unique
  emailVerified                   DateTime?                        @map("email_verified")
  createdAt                       DateTime                         @default(now())
  updatedAt                       DateTime                         @updatedAt
  role                            Role                             @default(BASIC)
  username                        String?                          @unique
  avatar                          String?
  collector_type                  CollectorType                    @default(GUEST)
  last_seen                       DateTime?                        @default(now())
  activated                       Boolean                          @default(false)
  stripe_customer_id              String?
  onboarded                       Boolean                          @default(false)
  projects                        UserToProjects[]
  totalValuation                  Decimal?                         @db.Decimal(20, 2)
  name                            String?
  impressions                     Int?
  viewed_profile                  Int?
  cover_image                     String?
  status                          UserStatus?                      @default(OFFLINE)
  notification_count              Int                              @default(0)
  message_count                   Int                              @default(0)
  accounts                        Account[]
  article                         article[]
  following                       follows[]                        @relation("follower")
  followers                       follows[]                        @relation("following")
  login_history                   login_history[]                  @relation("user_login_history")
  marketplace_product             marketplace_product[]
  from_notifications              notifications[]                  @relation("from_notifications")
  to_notifications                notifications[]                  @relation("to_notifications")
  price_alerts                    price_alerts[]                   @relation("price_alerts")
  profile                         profile?
  sessions                        Session[]
  users_preferences_accessibility users_preferences_accessibility?
  //  poker_profile                   poker_profile?
  veve_profile                    veve_profile?
  veve_watchlist                  veve_watchlist[]
  servers                         server[]                         @relation("server_members")
  sent_direct_messages            direct_message[]                 @relation("sender")
  received_direct_messages        direct_message[]                 @relation("receiver")
  channel_messages                channel_message[]
  UserToRoles                     UserToRoles[]                    @relation("user_to_roles")
  message                         message[]
  conversation                    conversation[]
  conversation_participant        conversation_participant[]
  server                          server[]
  server_member                   server_member[]
  channel_read_receipt            channel_read_receipt[]
  ChannelRole                     ChannelRole[]
  user_badges                     user_badges[]
  Mute                            Mute[]

  @@index([email], map: "email")
  @@index([username], map: "username")
  @@index([stripe_customer_id], map: "stripe_customer_id")
  @@index([id], name: "userId_idx")
  @@map("users")
}

model users_preferences_accessibility {
  id                Int          @id @default(autoincrement())
  screen_reader     Boolean      @default(false)
  magnifier         Boolean      @default(false)
  readable_font     Boolean      @default(false)
  dyslexia_font     Boolean      @default(false)
  img_descriptions  Boolean      @default(false)
  highlight_links   Boolean      @default(false)
  highlight_headers Boolean      @default(false)
  text_magnifier    Boolean      @default(false)
  virtual_keyboard  Boolean      @default(false)
  monochrome        Boolean      @default(false)
  dark_contrast     Boolean      @default(false)
  light_contrast    Boolean      @default(true)
  cursor_option     CursorOption @default(DEFAULT)
  font_size         Float        @default(1)
  user_id           String       @unique
  user              User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model follows {
  followerId  String
  followingId String
  follower    User   @relation("follower", fields: [followerId], references: [id])
  following   User   @relation("following", fields: [followingId], references: [id])

  @@id([followerId, followingId])
  @@index([followingId], map: "follows_followingId_fkey")
}

model profile {
  id                   Int                @id @default(autoincrement())
  bio                  String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime
  user_id              String             @unique
  onboarded            Boolean            @default(false)
  veve_wallet_imported Boolean            @default(false)
  veve_wallet_address  String?
  mcfarlane_wallets    mcfarlane_wallets?
  users                User               @relation(fields: [user_id], references: [id])
}

enum CollectorType {
  PHYSICAL_COLLECTOR
  DIGITAL_COLLECTOR
  HYBRID
  GUEST
}

// schemas/writers.prisma
// Writers

model writers {
  author_id      String                 @id
  name           String
  slug           String?                @unique
  image          String?
  createdAt      DateTime               @default(now())
  updatedAt      DateTime?              @updatedAt
  veve_comics    veve_comics[]          @relation("veve_comicsTowriters")
  translations   writers_translations[]
  writers_grails writers_grails[]
}

model writers_translations {
  author_id       String
  language        Language
  title           String?
  content         String?  @db.Text
  subtitle        String?  @db.Text
  seo_description String?  @db.Text
  seo_keywords    String?  @db.Text
  seo_title       String?  @db.Text
  og_title        String?  @db.Text
  og_description  String?  @db.Text
  author          writers  @relation(fields: [author_id], references: [author_id])

  @@id([language, author_id])
  @@index([language])
}

model writers_grails {
  id              Int          @id @default(autoincrement())
  title           String
  description     String?      @db.Text
  year            Int
  number          String
  unique_cover_id String?
  author_id       String
  writer          writers      @relation(fields: [author_id], references: [author_id])
  comic           veve_comics? @relation(fields: [unique_cover_id], references: [unique_cover_id])

  @@index([author_id])
  @@index([unique_cover_id])
}

// schemas/_enums.prisma
// Enum and Setting Tables

enum Language {
  EN
  ES
  DE
  FR
  CN
  IN
  IT
  JP
}

enum WalletValuationType {
  COLLECTIBLE
  COMIC
  TOTAL
}

enum MarketProductStatus {
  PENDING
  LISTED
  COMPLETE
  REJECTED
}

enum MarketProductType {
  PHYSICAL_PRODUCT
  DIGITAL_PRODUCT
}

enum Role {
  BASIC
  SUPREME
}

enum poker_table_message_type {
  TEXT
  IMAGE
  OFFER
}

enum poker_table_status {
  WAITING
  IN_PROGRESS
  GAME_OVER
}

enum message_type {
  TEXT
  IMAGE
  OFFER
  MARKETPLACE_OFFER
}

enum poker_table_message_status {
  SENT
  RECEIVED
  SEEN
}

enum message_status {
  SENT
  RECEIVED
  SEEN
}

enum posts_audience {
  PUBLIC
  ONLY_ME
  SPECIFIC
}

enum CommunityPrivacy {
  PUBLIC
  PRIVATE
  HODLERS
}

enum UserStatus {
  ONLINE
  OFFLINE
  IDLE
}

enum NotificationCategory {
  DEFAULT
  MARKETPLACE
  COMMUNITY
  ALERT
}

enum PriceAlertDirection {
  ABOVE
  BELOW
}

enum CollectibleType {
  COLLECTIBLE
  COMIC
}

enum NotificationType {
  DEFAULT
  POST
  FOLLOWER
  COMMUNITY
  OFFER
  MARKETPLACE_OFFER
  PRICE_ALERT
  WALLET_ACTIVITY
}

enum CursorOption {
  DEFAULT
  BLACK
  WHITE
}

enum MessageType {
  TEXT
  EMOJI
  GIF
}

// END_MODELS
